import React, { useState, useEffect } from "react";
import { MedicalImage, ValidationAttempt } from "@/entities/all";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { Shield, FileCheck, AlertTriangle, TrendingUp, Upload, CheckCircle2 } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Skeleton } from "@/components/ui/skeleton";
import { format } from "date-fns";

import StatsCard from "../components/dashboard/StatsCard";
import RecentUploads from "../components/dashboard/RecentUploads";
import ValidationHistory from "../components/dashboard/ValidationHistory";

export default function Dashboard() {
  const [images, setImages] = useState([]);
  const [validations, setValidations] = useState([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    setIsLoading(true);
    const [imagesData, validationsData] = await Promise.all([
      MedicalImage.list("-created_date", 20),
      ValidationAttempt.list("-created_date", 20)
    ]);
    setImages(imagesData);
    setValidations(validationsData);
    setIsLoading(false);
  };

  const originalCount = validations.filter(v => v.result === "original").length;
  const tamperedCount = validations.filter(v => v.result === "tampered").length;

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-teal-50">
      <div className="relative overflow-hidden bg-gradient-to-r from-cyan-600 to-blue-700 text-white">
        <div className="absolute inset-0 opacity-20">
          <div className="absolute top-0 right-0 w-96 h-96 bg-white rounded-full blur-3xl"></div>
          <div className="absolute bottom-0 left-0 w-96 h-96 bg-cyan-300 rounded-full blur-3xl"></div>
        </div>
        
        <div className="relative max-w-7xl mx-auto px-6 py-12 md:py-16">
          <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-6">
            <div>
              <h1 className="text-3xl md:text-5xl font-bold mb-3">Medical Image Authentication</h1>
              <p className="text-cyan-100 text-lg">Secure • Verifiable • Tamper-Proof</p>
            </div>
            <div className="flex gap-3">
              <Link to={createPageUrl("Upload")}>
                <Button size="lg" className="bg-white text-cyan-700 hover:bg-cyan-50">
                  <Upload className="w-5 h-5 mr-2" />
                  Upload Image
                </Button>
              </Link>
              <Link to={createPageUrl("Validate")}>
                <Button size="lg" variant="outline" className="border-white text-white hover:bg-white/20">
                  <CheckCircle2 className="w-5 h-5 mr-2" />
                  Validate
                </Button>
              </Link>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-6 py-8">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <StatsCard
            title="Total Images"
            value={images.length}
            icon={Shield}
            bgColor="from-blue-500 to-blue-600"
            trend={`${images.filter(img => {
              const weekAgo = new Date();
              weekAgo.setDate(weekAgo.getDate() - 7);
              return new Date(img.created_date) > weekAgo;
            }).length} this week`}
          />
          <StatsCard
            title="Validated"
            value={originalCount}
            icon={FileCheck}
            bgColor="from-green-500 to-emerald-600"
            trend="All authentic"
          />
          <StatsCard
            title="Tampered Detected"
            value={tamperedCount}
            icon={AlertTriangle}
            bgColor="from-red-500 to-rose-600"
            trend={tamperedCount > 0 ? "Requires attention" : "All clear"}
          />
          <StatsCard
            title="Validation Rate"
            value={`${validations.length > 0 ? Math.round((originalCount / validations.length) * 100) : 100}%`}
            icon={TrendingUp}
            bgColor="from-purple-500 to-indigo-600"
            trend="Success rate"
          />
        </div>

        <div className="grid lg:grid-cols-3 gap-6">
          <div className="lg:col-span-2">
            <RecentUploads images={images} isLoading={isLoading} />
          </div>
          <div>
            <ValidationHistory validations={validations} isLoading={isLoading} />
          </div>
        </div>
      </div>
    </div>
  );
}
